
ACTIVIDAD DE EMSAMBLADOR 
DEC - RA22045


RESTAsection .data?    salto db 10?    digito1 db '5'?    digito2 db '2'?    digito3 db '1'?    texto  db  "El Resultado de la Resta es el Siguiente "?    tamano equ $ - textosection .bss?    res resb 1?    section .textglobal start_start:?    ; Primer digito?    mov     ax, [digito1]           ; AX para registros de 16 bits?    sub     ax, '0'              ; De ASCII a entero?    ; Segundo digito?    mov     bx, [digito2]           ; BX para registros de 16 bits?    sub     bx, '0'              ; De ASCII a entero?    ; Restamos digito2 de digito1?    sub     ax, bx               ?    ; Tercer digito?    mov     cx, [digito3]           ; CX para registros de 16 bits?    sub     cx, '0'              ; De ASCII a entero?    ; Restamos digito3 del resultado anterior?    sub     ax, cx               ?    ; Convertimos el resultado a ASCII?    add     ax, '0'              ?    ; Guardamos el resultado de la resta?    mov     [res], ax?    ; Imprimimos el resultado?    mov     ecx, texto?    mov     edx, tamano?    mov     ebx, 1?    mov     eax, 4?    int     0x80?    ; Imprimimos un salto de l’nea?    mov     ecx, salto?    mov     edx, 1?    mov     ebx, 1?    mov     eax, 4?    int     0x80??    ; Imprimimos el resultado de la Resta?    mov     ecx, res?    mov     edx, 1?    mov     ebx, 1?    mov     eax, 4?    int     0x80?    ; Terminamos el programa?    mov     eax, 1?    int     0x80MULTIPLICACIONsection .data?    valor1 db '5'?    valor2 db '2'?    mensaje  db  "El Resultado de la Multiplicacion es "?    longitud equ $ - mensaje?    nuevaLinea db 10section .bss?    producto resb 2  ; Reservamos 2 bytes para el producto en ASCIIsection .textglobal _start?_start:?    ; Nœmero uno?    mov     al, [valor1]           ; AL para registros de 8 bits?    sub     al, '0'                ; De ASCII a entero?    ; Nœmero dos?    mov     bl, [valor2]           ; BL para registros de 8 bits?    sub     bl, '0'                ; De ASCII a entero?    mul     bl                     ; Multiplicamos AL por BL?    ; Convertimos el producto a ASCII??    mov     ah, 0                  ; Limpiamos AH?    mov     bh, 10                 ; BH = 10 para dividir por 10 ?    div     bh                     ; Dividimos AX por 10?    add     ah, '0'                ; Convertimos el d’gito de las decenas a ASCII?    mov     [producto + 1], ah     ; Almacenamos el d’gito de las decenas (en el segundo byte)?    add     al, '0'                ; Convertimos el d’gito de las unidades a ASCII?    mov     [producto], al         ; Almacenamos el d’gito de las unidades (en el primer byte)?    ; Imprimimos el mensaje??    mov     ecx, mensaje?    mov     edx, longitud?    mov     ebx, 1?    mov     eax, 4?    int     0x80??    ; Imprimimos un salto de l’nea?    mov     ecx, nuevaLinea?    mov     edx, 1?    mov     ebx, 1?    mov     eax, 4?    int     0x80??    ; Imprimimos el producto de la multiplicaci—n??    mov     ecx, producto?    mov     edx, 2                ; Imprimimos solo dos caracteres?    mov     ebx, 1?    mov     eax, 4?    int     0x80??    ; Salimos del programa??    mov     eax, 1?    int     0x80Divisionsection .data?    valorA db '4'?    valorB db '2'?    texto  db  "El resultado de la Division es "?    longitud equ $ - texto?    lineaNueva db 10section .bss?    divResultado resb 1  ; Espacio para el resultado de la divisi—n en ASCIIsection .textglobal _start?_start:?    ; Cargamos el primer valor en AL?    mov     al, [valorA]?    ; Convertimos de ASCII a nœmero?    sub     al, '0'?    ; Limpiamos el registro AH?    xor     ah, ah?    ; Dividimos AL por el segundo valor?    mov     cl, [valorB]?    sub     cl, '0'      ; De ASCII a nœmero?    div     cl?    ; Pasamos el resultado de la divisi—n (en AL) a AH?    mov     ah, al?    ; Convertimos el resultado de la divisi—n a ASCII?    add     ah, '0'?    ; Guardamos el resultado de la divisi—n en "divResultado"?    mov     [divResultado], ah?    ; Mostramos el mensaje?    mov     ecx, texto?    mov     edx, longitud?    mov     ebx, 1?    mov     eax, 4?    int     0x80??    ; Mostramos un salto de l’nea?    mov     ecx, lineaNueva?    mov     edx, 1?    mov     ebx, 1?    mov     eax, 4?    int     0x80?    ; Mostramos el resultado de la divisi—n??    mov     ecx, divResultado?    mov     edx, 1              ; Mostramos un solo byte?    mov     ebx, 1?    mov     eax, 4?    int     0x80??    ; Terminamos el programa?    mov     eax, 1?    int     0x80